name: LunchChat CI/CD Pipeline

on:
  push:
    branches:
      - main
      - 'dev/**'
  pull_request:
    branches:
      - main
      - 'dev/**'

env:
  DOCKER_IMAGE_NAME: lunchchat-backend
  DOCKER_REGISTRY: xoo1228

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/dev/')
    timeout-minutes: 30

    outputs:
      image-tag: ${{ steps.set-tag.outputs.IMAGE_TAG }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build application
        run: ./gradlew build -x test --no-daemon --parallel

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set image tag
        id: set-tag
        run: |
          SAFE_REF_NAME=$(echo "${{ github.ref_name }}" | tr '/\' '-' )
          echo "IMAGE_TAG=${SAFE_REF_NAME}-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ steps.set-tag.outputs.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/dev/')
    timeout-minutes: 20

    strategy:
      fail-fast: true
      matrix:
        server: [
          { id: "server1", name: "Server-1" },
          { id: "server2", name: "Server-2" }
        ]

    steps:
      - name: Set server host
        id: set-host
        run: |
          if [ "${{ matrix.server.id }}" = "server1" ]; then
            echo "host=${{ secrets.SERVER1_HOST }}" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.server.id }}" = "server2" ]; then
            echo "host=${{ secrets.SERVER2_HOST }}" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to ${{ matrix.server.name }}
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ steps.set-host.outputs.host }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          timeout: 15m
          command_timeout: 10m
          script: |
            set -e
            
            # 함수 정의
            ensure_image() {
              local img="$1"
              if ! docker image inspect "$img" >/dev/null 2>&1; then
                docker pull "$img" || return 1
              fi
            }
            
            start_services() {
              local tag="$1"
              export IMAGE_TAG="$tag"
              export DOCKER_REGISTRY=${{ env.DOCKER_REGISTRY }}
              export DOCKER_IMAGE_NAME=${{ env.DOCKER_IMAGE_NAME }}
              docker-compose up -d backend --no-build
              sleep 10
            }
            
            health_check() {
              local max_attempts=25
              for i in $(seq 1 $max_attempts); do
                if curl -sf -m 5 http://localhost:8080/actuator/health | grep -q '"status":"UP"'; then
                  curl -sf -m 3 http://localhost:8080/actuator/health/db >/dev/null 2>&1 && return 0
                fi
                [ $i -eq $max_attempts ] && return 1
                sleep 12
              done
            }
            
            cleanup() {
              docker-compose down || true
              docker container prune -f >/dev/null 2>&1 || true
            }
            
            # 메인 로직
            cd /home/ubuntu
            
            # 환경 파일 설정
            if [[ "${{ github.ref_name }}" == "main" ]]; then
              ENV_CONFIG_FILE="/opt/lunchchat/configs/.env.production"
            else
              ENV_CONFIG_FILE="/opt/lunchchat/configs/.env.development"
            fi
            
            # 백업 생성
            if [ -d "lunchchat-app" ]; then
              cd lunchchat-app
              cleanup
            
              if [ -f ".env" ]; then
                CURRENT_TAG=$(grep "^IMAGE_TAG=" ".env" | cut -d'=' -f2)
                if [ -n "$CURRENT_TAG" ]; then
                  BACKUP_IMG="${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:$CURRENT_TAG"
                  if ensure_image "$BACKUP_IMG"; then
                    echo "BACKUP_IMAGE_TAG=$CURRENT_TAG" > /tmp/backup_info.env
                    cp ".env" /tmp/backup.env
                    echo "✅ 백업 생성 완료: $CURRENT_TAG"
                  fi
                fi
              fi
              cd ..
            fi
            
            # 새 버전 배포
            rm -rf lunchchat-temp lunchchat-app
            git clone -q --depth 1 --branch "${{ github.ref_name }}" \
              ${{ github.server_url }}/${{ github.repository }}.git lunchchat-temp
            
            mv lunchchat-temp lunchchat-app
            cd lunchchat-app
            
            # 설정 파일 준비
            cp "$ENV_CONFIG_FILE" .env
            cat > firebase-service-account-key.json << 'EOF'
            ${{ secrets.FCM_SERVICE_ACCOUNT_JSON }}
            EOF
            chmod 600 firebase-service-account-key.json
            sed -i "s/^IMAGE_TAG=.*/IMAGE_TAG=${{ needs.build-and-push.outputs.image-tag }}/" .env
            mkdir -p logs
            
            # 새 이미지 준비
            NEW_IMG="${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.build-and-push.outputs.image-tag }}"
            ensure_image "$NEW_IMG" || { echo "❌ 새 이미지 다운로드 실패"; exit 1; }
            
            # 서비스 시작 및 헬스체크
            start_services "${{ needs.build-and-push.outputs.image-tag }}"
            
            if health_check; then
              echo "🎉 배포 성공!"
              rm -f /tmp/backup*.env
            
              # 이전 이미지 정리
              docker images "${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}" --format "{{.Repository}}:{{.Tag}}" | \
                tail -n +4 | xargs -r docker rmi 2>/dev/null || true
            
            else
              echo "🔄 배포 실패, 롤백 시도 중..."
            
              if [ -f "/tmp/backup.env" ] && [ -f "/tmp/backup_info.env" ]; then
                cleanup
                source /tmp/backup_info.env
            
                BACKUP_IMG="${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:$BACKUP_IMAGE_TAG"
                if ensure_image "$BACKUP_IMG"; then
                  cp /tmp/backup.env .env
                  start_services "$BACKUP_IMAGE_TAG"
            
                  if health_check; then
                    echo "✅ 롤백 성공!"
                  else
                    echo "❌ 롤백 실패"
                  fi
                else
                  echo "❌ 백업 이미지 사용 불가"
                fi
              else
                echo "⚠️ 백업 없음, 수동 개입 필요"
              fi
            
              rm -f /tmp/backup*.env
              exit 1
            fi

  verify:
    needs: deploy
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Verify Load Balancer
        run: |
          echo "🔍 로드밸런서 확인 중..."

          SUCCESS_COUNT=0
          TOTAL_CHECKS=10

          for i in $(seq 1 $TOTAL_CHECKS); do
            response=$(curl -s -o /dev/null -w "%{http_code}" -m 10 https://${{ secrets.LOAD_BALANCER_IP }}/actuator/health || echo "000")
            if [ "$response" = "200" ]; then
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            fi
            sleep 3
          done

          SUCCESS_RATE=$((SUCCESS_COUNT * 100 / TOTAL_CHECKS))

          if [ $SUCCESS_RATE -ge 80 ]; then
            echo "🎉 배포 검증 성공 (성공률: $SUCCESS_RATE%)"
          else
            echo "❌ 배포 검증 실패 (성공률: $SUCCESS_RATE%)"
            exit 1
          fi