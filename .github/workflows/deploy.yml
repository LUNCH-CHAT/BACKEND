name: LunchChat CI/CD Pipeline

on:
  push:
    branches:
      - main
      - 'dev/**'
  pull_request:
    branches:
      - main
      - 'dev/**'

env:
  DOCKER_IMAGE_NAME: lunchchat-backend
  DOCKER_REGISTRY: xoo1228

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/dev/')
    timeout-minutes: 30

    outputs:
      image-tag: ${{ steps.set-tag.outputs.IMAGE_TAG }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build application
        run: ./gradlew build -x test --no-daemon --parallel

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set image tag
        id: set-tag
        run: |
          SAFE_REF_NAME=$(echo "${{ github.ref_name }}" | tr '/\' '-' )
          echo "IMAGE_TAG=${SAFE_REF_NAME}-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ steps.set-tag.outputs.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/dev/')
    timeout-minutes: 20

    strategy:
      fail-fast: false
      matrix:
        server: [
          { id: "server1", name: "Server-1" },
          { id: "server2", name: "Server-2" }
        ]

    steps:
      - name: Set server host
        id: set-host
        run: |
          if [ "${{ matrix.server.id }}" = "server1" ]; then
            echo "host=${{ secrets.SERVER1_HOST }}" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.server.id }}" = "server2" ]; then
            echo "host=${{ secrets.SERVER2_HOST }}" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to ${{ matrix.server.name }}
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ steps.set-host.outputs.host }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          timeout: 15m
          command_timeout: 10m
          script: |
            set -e
            
            echo "🚀 ${{ matrix.server.name }} 배포 시작"
            cd /home/ubuntu
            
            # 백업 생성
            if [ -d "lunchchat-app" ]; then
              cd lunchchat-app
              docker-compose down || true
            
              # 현재 버전 백업
              if [ -f ".env" ]; then
                CURRENT_IMAGE_TAG=$(grep "^IMAGE_TAG=" .env | cut -d'=' -f2 2>/dev/null || echo "")
                if [ ! -z "$CURRENT_IMAGE_TAG" ]; then
                  echo "BACKUP_IMAGE_TAG=$CURRENT_IMAGE_TAG" > /tmp/backup_info.env
                  cp .env /tmp/backup.env
                fi
              fi
              cd ..
            fi
            
            # 업데이트
            rm -rf lunchchat-temp
            BRANCH_NAME="${{ github.ref_name }}"
            git clone --depth 1 --branch "$BRANCH_NAME" \
              ${{ github.server_url }}/${{ github.repository }}.git lunchchat-temp
            
            if [ -f "lunchchat-app/.env" ]; then
              cp lunchchat-app/.env lunchchat-temp/
            else
              echo "⚠️ .env 파일이 없습니다."
              exit 1
            fi
            
            rm -rf lunchchat-app
            mv lunchchat-temp lunchchat-app
            cd lunchchat-app
            
            # FCM 설정
            cat > firebase-service-account-key.json << 'FCMEOF'
            ${{ secrets.FCM_SERVICE_ACCOUNT_JSON }}
            FCMEOF
            chmod 600 firebase-service-account-key.json
            
            # IMAGE_TAG 업데이트
            sed -i "s/^IMAGE_TAG=.*/IMAGE_TAG=${{ needs.build-and-push.outputs.image-tag }}/" .env
            mkdir -p logs
            
            # 이미지 준비
            if ! docker image inspect "${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.build-and-push.outputs.image-tag }}" >/dev/null 2>&1; then
              echo "📦 이미지 다운로드 중..."
              docker pull "${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.build-and-push.outputs.image-tag }}"
            fi
            
            # 컨테이너 시작
            export IMAGE_TAG=${{ needs.build-and-push.outputs.image-tag }}
            export DOCKER_REGISTRY=${{ env.DOCKER_REGISTRY }}
            export DOCKER_IMAGE_NAME=${{ env.DOCKER_IMAGE_NAME }}
            
            docker-compose up -d backend --no-build
            sleep 15
            
            # 헬스체크
            HEALTH_CHECK_SUCCESS=false
            for i in {1..20}; do
              if curl -f -m 5 http://localhost:8080/actuator/health >/dev/null 2>&1; then
                echo "✅ 헬스체크 성공"
                HEALTH_CHECK_SUCCESS=true
                break
              fi
            
              if [ $i -eq 20 ]; then
                echo "❌ 헬스체크 실패"
                break
              fi
            
              sleep 8
            done
            
            # 결과 처리
            if [ "$HEALTH_CHECK_SUCCESS" = true ]; then
              rm -f /tmp/backup*.env
            
              OLD_IMAGES=$(docker images "$DOCKER_REGISTRY/$DOCKER_IMAGE_NAME" --format "{{.Repository}}:{{.Tag}}" | tail -n +4)
            
              if [ ! -z "$OLD_IMAGES" ]; then
                echo "$OLD_IMAGES" | xargs -r docker rmi 2>/dev/null || true
              fi
            
              docker rmi $(docker images -f "dangling=true" -q) 2>/dev/null || true
            
              echo "🎉 배포 완료"
            else
              echo "🔄 롤백 시작..."
            
              if [ -f "/tmp/backup.env" ] && [ -f "/tmp/backup_info.env" ]; then
                docker-compose down || true
                cp /tmp/backup.env .env
                source /tmp/backup_info.env
            
                export IMAGE_TAG=$BACKUP_IMAGE_TAG
                docker-compose up -d backend --no-build
                sleep 15
            
                if curl -f -m 5 http://localhost:8080/actuator/health >/dev/null 2>&1; then
                  echo "✅ 롤백 성공"
                else
                  echo "❌ 롤백 실패"
                fi
              else
                echo "❌ 백업 파일 없음"
              fi
            
              rm -f /tmp/backup*.env
              exit 1
            fi

  verify:
    needs: deploy
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Verify Load Balancer
        run: |
          echo "🔍 로드밸런서 확인 중..."
          
          SUCCESS_COUNT=0
          TOTAL_CHECKS=10
          
          for i in $(seq 1 $TOTAL_CHECKS); do
            response=$(curl -s -o /dev/null -w "%{http_code}" -m 10 https://${{ secrets.LOAD_BALANCER_IP }}/actuator/health || echo "000")
            if [ "$response" = "200" ]; then
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            fi
            sleep 3
          done
          
          SUCCESS_RATE=$((SUCCESS_COUNT * 100 / TOTAL_CHECKS))
          
          if [ $SUCCESS_RATE -ge 80 ]; then
            echo "🎉 배포 검증 성공 (성공률: $SUCCESS_RATE%)"
          else
            echo "❌ 배포 검증 실패 (성공률: $SUCCESS_RATE%)"
            exit 1
          fi
