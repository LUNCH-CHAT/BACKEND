name: LunchChat CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE_NAME: lunchchat-backend
  DOCKER_REGISTRY: xoo1228

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      # 데이터베이스 설정
      DB_URL: ${{ secrets.DB_URL }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PW: ${{ secrets.DB_PW }}

      # JWT 설정
      SECRET_KEY: ${{ secrets.SECRET_KEY }}

      # OAuth 설정
      CLIENT_ID: ${{ secrets.CLIENT_ID }}
      CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}

      # FCM 설정
      FCM_SERVICE_ACCOUNT_JSON: ${{ secrets.FCM_SERVICE_ACCOUNT_JSON }}

      # Redis 설정
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}

      # Spring Profile
      SPRING_PROFILES_ACTIVE: dev

    steps:
      - uses: actions/checkout@v4

      - name: Debug Environment Variables
        run: |
          echo "🔍 환경변수 디버깅..."
          echo "=================================="
          
          # Spring Profile 확인
          echo "SPRING_PROFILES_ACTIVE: $SPRING_PROFILES_ACTIVE"
          
          # 데이터베이스 설정 확인 (민감하지 않은 정보만)
          echo "DB_USER: $DB_USER"
          if [ -n "$DB_URL" ]; then
            echo "DB_URL: 설정됨 (${#DB_URL} 문자)"
          else
            echo "DB_URL: 설정되지 않음 ❌"
          fi
          if [ -n "$DB_PW" ]; then
            echo "DB_PW: 설정됨 (${#DB_PW} 문자)"
          else
            echo "DB_PW: 설정되지 않음 ❌"
          fi
          
          # JWT 설정 확인
          if [ -n "$SECRET_KEY" ]; then
            echo "SECRET_KEY: 설정됨 (${#SECRET_KEY} 문자)"
          else
            echo "SECRET_KEY: 설정되지 않음 ❌"
          fi
          
          # OAuth 설정 확인
          if [ -n "$CLIENT_ID" ]; then
            echo "CLIENT_ID: 설정됨 (${#CLIENT_ID} 문자)"
          else
            echo "CLIENT_ID: 설정되지 않음 ❌"
          fi
          if [ -n "$CLIENT_SECRET" ]; then
            echo "CLIENT_SECRET: 설정됨 (${#CLIENT_SECRET} 문자)"
          else
            echo "CLIENT_SECRET: 설정되지 않음 ❌"
          fi
          
          # FCM 설정 확인
          if [ -n "$FCM_SERVICE_ACCOUNT_JSON" ]; then
            echo "FCM_SERVICE_ACCOUNT_JSON: 설정됨 (${#FCM_SERVICE_ACCOUNT_JSON} 문자)"
          else
            echo "FCM_SERVICE_ACCOUNT_JSON: 설정되지 않음 ❌"
          fi
          
          # Redis 설정 확인
          echo "REDIS_HOST: $REDIS_HOST"
          if [ -n "$REDIS_PASSWORD" ]; then
            echo "REDIS_PASSWORD: 설정됨 (${#REDIS_PASSWORD} 문자)"
          else
            echo "REDIS_PASSWORD: 설정되지 않음 (빈 값일 수 있음)"
          fi
          
          echo "=================================="
          echo "✅ 환경변수 디버깅 완료"

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Debug Gradle properties (if needed)
        run: |
          echo "🔍 Gradle 환경 확인..."
          ./gradlew properties | grep -E "(profile|spring)" || echo "프로파일 관련 속성 없음"

      - name: Run tests
        run: ./gradlew test --no-daemon

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    outputs:
      image-tag: ${{ steps.set-tag.outputs.IMAGE_TAG }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build application
        run: ./gradlew build -x test --no-daemon

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set image tag
        id: set-tag
        run: |
          echo "IMAGE_TAG=main-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ steps.set-tag.outputs.IMAGE_TAG }}

  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    strategy:
      matrix:
        server: [
          { id: "server1", name: "Server-1" },
          { id: "server2", name: "Server-2" }
        ]

    steps:
      - name: Set server host
        id: set-host
        run: |
          if [ "${{ matrix.server.id }}" = "server1" ]; then
            echo "host=${{ secrets.SERVER1_HOST }}" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.server.id }}" = "server2" ]; then
            echo "host=${{ secrets.SERVER2_HOST }}" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to ${{ matrix.server.name }}
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ steps.set-host.outputs.host }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # 프로젝트 디렉토리 준비
            cd /home/ubuntu
            
            # 기존 애플리케이션 정지
            if [ -d "lunchchat-app" ]; then
              cd lunchchat-app
              docker-compose down || true
              cd ..
            fi
            
            # 최신 코드 클론
            rm -rf lunchchat-temp
            git clone ${{ github.server_url }}/${{ github.repository }}.git lunchchat-temp
            
            # 환경 변수 복사 (기존에 설정한 .env 파일)
            if [ -f "lunchchat/.env" ]; then
              cp lunchchat/.env lunchchat-temp/
            else
              echo "⚠️ .env 파일이 없습니다. 수동으로 생성해주세요."
              exit 1
            fi
            
            # 기존 프로젝트 교체
            rm -rf lunchchat-app
            mv lunchchat-temp lunchchat-app
            
            cd lunchchat-app
            
            # 환경 변수 설정
            export IMAGE_TAG=${{ needs.build-and-push.outputs.image-tag }}
            export DOCKER_REGISTRY=${{ env.DOCKER_REGISTRY }}
            export DOCKER_IMAGE_NAME=${{ env.DOCKER_IMAGE_NAME }}
            export SPRING_PROFILES_ACTIVE=dev
            
            # 로그 디렉토리 생성
            mkdir -p logs
            
            # 새 이미지 풀 및 실행
            docker-compose pull backend
            docker-compose up -d backend
            
            # 애플리케이션 시작 대기
            echo "애플리케이션 시작 대기 중..."
            sleep 45
            
            # 헬스 체크
            for i in {1..10}; do
              if curl -f http://localhost:8080/health >/dev/null 2>&1; then
                echo "✅ ${{ matrix.server.name }} 배포 성공!"
                break
              fi
              if [ $i -eq 10 ]; then
                echo "❌ ${{ matrix.server.name }} 헬스 체크 실패"
                docker-compose logs backend
                exit 1
              fi
              echo "헬스 체크 재시도 ($i/10)..."
              sleep 10
            done
            
            # 구 이미지 정리
            docker image prune -f
            
            echo "🎉 ${{ matrix.server.name }} 배포 완료!"

  verify-deployment:
    needs: deploy-production
    runs-on: ubuntu-latest

    steps:
      - name: Verify Load Balancer
        run: |
          echo "🔍 로드밸런서 확인 중..."
          
          # 로드밸런서를 통한 헬스 체크
          for i in {1..5}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.LOAD_BALANCER_IP }}/health || echo "000")
            if [ "$response" = "200" ]; then
              echo "✅ 로드밸런서 헬스 체크 성공 ($i/5)"
            else
              echo "⚠️ 로드밸런서 헬스 체크 실패: $response ($i/5)"
            fi
            sleep 5
          done
          
          echo "🎉 전체 배포 및 검증 완료!"
